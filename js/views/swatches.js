// Generated by CoffeeScript 1.6.3
var _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Intarsia.Views.Swatches = (function(_super) {
  __extends(Swatches, _super);

  function Swatches() {
    this.selectColor = __bind(this.selectColor, this);
    this.setDefaultColor = __bind(this.setDefaultColor, this);
    _ref = Swatches.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Swatches.prototype.collection = Intarsia.Collections.Swatches;

  Swatches.prototype.tagName = 'ul';

  Swatches.prototype.className = 'intarsia-palette clearfix';

  Swatches.prototype.defaults = function() {
    return {
      colors: ['red', 'orange', 'yellow', 'green', 'blue', 'navy', 'purple', 'white', 'silver', 'grey', 'black', 'default']
    };
  };

  Swatches.prototype.initialize = function() {
    var color, models, _i, _len, _ref1;
    models = [];
    _ref1 = this.defaults().colors;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      color = _ref1[_i];
      models.push(new Intarsia.Models.Swatch({
        color: color
      }));
    }
    this.collection = new Intarsia.Collections.Swatches(models);
    this.render();
    events.on('palette:change', this.selectColor, this);
    return events.on('pattern:reset', this.setDefaultColor, this);
  };

  Swatches.prototype.setDefaultColor = function(evt) {
    return this.$el.find('.palette-color a')[0].click();
  };

  Swatches.prototype.selectColor = function(color) {
    this.$el.find('.selected').removeClass('selected');
    return this.$el.children("." + color).addClass('selected');
  };

  Swatches.prototype.render = function() {
    var item, swatch, _i, _len, _ref1, _results;
    _ref1 = this.collection.models;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      swatch = new Intarsia.Views.Swatch({
        model: item
      });
      swatch.render();
      _results.push(this.$el.append(swatch.el));
    }
    return _results;
  };

  return Swatches;

})(Backbone.View);
