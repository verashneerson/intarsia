// Generated by CoffeeScript 1.6.3
var _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Intarsia.Views.Stitch = (function(_super) {
  __extends(Stitch, _super);

  function Stitch() {
    this.reset = __bind(this.reset, this);
    this.setBrushColor = __bind(this.setBrushColor, this);
    this.setDragging = __bind(this.setDragging, this);
    this.paintContinuous = __bind(this.paintContinuous, this);
    this.paint = __bind(this.paint, this);
    this.chooseColor = __bind(this.chooseColor, this);
    _ref = Stitch.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Stitch.prototype.model = Intarsia.Models.Stitch;

  Stitch.prototype.tagName = 'div';

  Stitch.prototype.template = $('#stitch-template').html();

  Stitch.prototype.defaults = {
    color: 'default'
  };

  Stitch.prototype.events = {
    'mousedown': 'chooseColor',
    'mouseenter': 'paintContinuous'
  };

  Stitch.prototype.initialize = function() {
    this.options = _.extend({}, this.defaults, this.options);
    this.brushColor = this.defaultColor = this.defaults.color;
    this.dragging = false;
    this.model.on('change', this.paint, this);
    events.on('palette:change', this.setBrushColor, this);
    events.on('mouse:dragging', this.setDragging, this);
    return events.on('pattern:reset', this.reset);
  };

  Stitch.prototype.getColor = function() {
    return this.model.get('color');
  };

  Stitch.prototype.setColor = function(color) {
    return this.model.set({
      color: color
    });
  };

  Stitch.prototype.chooseColor = function(evt) {
    var color;
    color = this.getColor() === this.brushColor ? this.defaultColor : this.brushColor;
    return this.setColor(color);
  };

  Stitch.prototype.paint = function() {
    return this.$el.find('.stitch').removeClass().addClass("stitch " + (this.getColor()));
  };

  Stitch.prototype.paintContinuous = function(dragging) {
    if (this.dragging) {
      return this.chooseColor();
    }
  };

  Stitch.prototype.setDragging = function(dragging) {
    return this.dragging = dragging;
  };

  Stitch.prototype.setBrushColor = function(color) {
    return this.brushColor = color;
  };

  Stitch.prototype.reset = function(evt) {
    return this.setColor(this.defaultColor);
  };

  Stitch.prototype.render = function() {
    this.$el.addClass("stitch-holder").html(this.template);
    return this.paint();
  };

  return Stitch;

})(Backbone.View);
