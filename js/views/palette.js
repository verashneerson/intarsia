// Generated by CoffeeScript 1.6.3
var _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Intarsia.Views.Palette = (function(_super) {
  __extends(Palette, _super);

  function Palette() {
    this.setColor = __bind(this.setColor, this);
    this.setDefaultColor = __bind(this.setDefaultColor, this);
    _ref = Palette.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Palette.prototype.collection = Intarsia.Collections.Swatches;

  Palette.prototype.defaults = {
    colors: ['red', 'orange', 'yellow', 'green', 'blue', 'navy', 'purple', 'white', 'silver', 'grey', 'black', 'default']
  };

  Palette.prototype.events = {
    'click a': 'setColor'
  };

  Palette.prototype.initialize = function() {
    return this.render();
  };

  Palette.prototype.setDefaultColor = function() {
    return this.$el.find('.palette-color a')[0].click();
  };

  Palette.prototype.setColor = function(evt) {
    var newColor;
    evt.preventDefault();
    newColor = $(evt.target).attr('class');
    events.trigger('palette:change', newColor);
    this.$el.find('.selected').removeClass('selected');
    $(evt.target).parent().addClass('selected');
    return false;
  };

  Palette.prototype.render = function() {
    var color, colors, _i, _len, _ref1;
    colors = [];
    _ref1 = this.defaults.colors;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      color = _ref1[_i];
      color = "<li class='palette-color " + color + "' data-color='" + color + "'><a class='" + color + "' href='#'></a></li>";
      colors.push(color);
    }
    return this.$el.html(colors.join(''));
  };

  return Palette;

})(Backbone.View);
