// Generated by CoffeeScript 1.6.3
define(function(require) {
  var App, Color, _;
  _ = require('underscore');
  App = require('app');
  return Color = (function() {
    Color.prototype.hex = /^#?([a-f\d]){6}$/i;

    Color.prototype.shortHex = /^#?([a-f\d]){3}$/i;

    Color.prototype.rgb = /rgba?\((\d{1,3})(, ?(\d{1,3})){2,3}\)/;

    function Color(color) {
      var type;
      type = this.getType(color);
      this.color = (function() {
        switch (type) {
          case 'hex':
            return this.hexToColor(color);
          case 'shortHex':
            return this.hexToColor(this.shortHexToHex(color));
          case 'rgb':
            return this.rgbToColor(color);
          default:
            return this.hexToColor(App.baseColor);
        }
      }).call(this);
    }

    Color.prototype.getType = function(color) {
      switch (false) {
        case !this.hex.test(color):
          return 'hex';
        case !this.shortHex.test(color):
          return 'shortHex';
        case !this.rgb.test(color):
          return 'rgb';
        default:
          return 'invalid';
      }
    };

    Color.prototype.shortHexToHex = function(color) {
      var channels, longHex;
      channels = color.match(/[a-f\d]/gi);
      longHex = _.map(channels, function(val) {
        return "" + val + val;
      });
      return "#" + (longHex.join(""));
    };

    Color.prototype.hexToColor = function(color) {
      var hex;
      hex = parseInt(color.replace(/^#/, ''), 16);
      return {
        r: (hex >> 16) & 255,
        g: (hex >> 8) & 255,
        b: hex & 255
      };
    };

    Color.prototype.rgbToColor = function(color) {
      var colorValues;
      colorValues = color.match(/\d+/g);
      return {
        r: colorValues[0],
        g: colorValues[1],
        b: colorValues[2]
      };
    };

    Color.prototype.adjustChannel = function(channel, percent) {
      var newChannel;
      newChannel = parseInt(channel * (100 - percent) / 100);
      switch (false) {
        case !(newChannel > 255):
          return 255;
        case !(newChannel < 0):
          return 0;
        default:
          return newChannel;
      }
    };

    Color.prototype.adjust = function(percent) {
      var c, _i, _len, _ref;
      _ref = ['r', 'g', 'b'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        this.color[c] = this.adjustChannel(this.color[c], percent);
      }
      return this;
    };

    Color.prototype.toRgb = function() {
      return "rgb(" + this.color.r + ", " + this.color.g + ", " + this.color.b + ")";
    };

    Color.prototype.toHex = function() {
      var hex;
      hex = (1 << 24) + (this.color.r << 16) + (this.color.g << 8) + this.color.b;
      return "#" + hex.toString(16).slice(1);
    };

    return Color;

  })();
});
