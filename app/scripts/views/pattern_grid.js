// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'vent', 'collections/stitches', 'views/stitches_row'], function($, _, Backbone, AppEvents, StitchesCollection, StitchesRowView) {
  var PatternGrid, _ref;
  return PatternGrid = (function(_super) {
    __extends(PatternGrid, _super);

    function PatternGrid() {
      this.addOne = __bind(this.addOne, this);
      this.stopPaint = __bind(this.stopPaint, this);
      this.paint = __bind(this.paint, this);
      _ref = PatternGrid.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PatternGrid.prototype.className = 'intarsia-grid';

    PatternGrid.prototype.defaults = {
      grid: []
    };

    PatternGrid.prototype.events = {
      'mousedown': 'paint',
      'mouseup': 'stopPaint',
      'mouseleave': 'stopPaint'
    };

    PatternGrid.prototype.initialize = function(options) {
      this.options = _.extend({}, this.defaults, options);
      return this.listenTo(AppEvents, 'pattern_grid:remove', this.remove);
    };

    PatternGrid.prototype.removeItemViews = function() {
      AppEvents.trigger('stitches_row:remove');
      return AppEvents.trigger('stitch:remove');
    };

    PatternGrid.prototype.paint = function(evt) {
      return AppEvents.trigger('mouse:dragging', true);
    };

    PatternGrid.prototype.stopPaint = function(evt) {
      return AppEvents.trigger('mouse:dragging', false);
    };

    PatternGrid.prototype.addOne = function(item, row) {
      var stitchRow, stitchRowCollection;
      stitchRowCollection = new StitchesCollection(item);
      stitchRow = new StitchesRowView({
        collection: stitchRowCollection,
        row: row
      });
      return this.$el.children('ul:first').append(stitchRow.render().el);
    };

    PatternGrid.prototype.addAll = function() {
      var row, _i, _ref1, _results;
      this.removeItemViews();
      this.$el.html('<ul></ul>');
      _results = [];
      for (row = _i = 0, _ref1 = this.options.grid.length - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; row = 0 <= _ref1 ? ++_i : --_i) {
        _results.push(this.addOne(this.options.grid[row], row));
      }
      return _results;
    };

    PatternGrid.prototype.render = function() {
      this.addAll();
      return this;
    };

    return PatternGrid;

  })(Backbone.View);
});
