// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'vent', 'views/pattern_edit_form', 'views/palette', 'views/pattern_grid'], function($, _, Backbone, AppEvents, PatternEditFormView, PaletteView, PatternGrid) {
  var PatternView, _ref;
  return PatternView = (function(_super) {
    __extends(PatternView, _super);

    function PatternView() {
      this.reset = __bind(this.reset, this);
      this.save = __bind(this.save, this);
      _ref = PatternView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PatternView.prototype.className = 'intarsia-pattern-edit';

    PatternView.prototype.events = {
      'click #reset': 'reset',
      'click #save': 'save'
    };

    PatternView.prototype.initialize = function(options) {
      this.options = _.extend({}, this.defaults, options);
      return this.listenTo(AppEvents, 'pattern:remove', this.remove);
    };

    PatternView.prototype.removeItemViews = function() {
      AppEvents.trigger('pattern_grid:remove');
      AppEvents.trigger('palette:remove');
      return AppEvents.trigger('pattern_edit:remove');
    };

    PatternView.prototype.save = function(evt) {
      return evt.preventDefault();
    };

    PatternView.prototype.reset = function(evt) {
      evt.preventDefault();
      AppEvents.trigger('pattern:reset');
      return false;
    };

    PatternView.prototype.render = function() {
      var form, grid, palette;
      this.removeItemViews();
      form = new PatternEditFormView({
        model: this.model
      });
      this.$el.append(form.render().el);
      palette = new PaletteView();
      this.$el.append(palette.render().el);
      grid = new PatternGrid({
        grid: this.model.get('grid')
      });
      this.$el.append(grid.render().el);
      palette.setDefaultColor();
      return this;
    };

    return PatternView;

  })(Backbone.View);
});
