// Generated by CoffeeScript 1.6.3
var _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Intarsia.Views.Palette = (function(_super) {
  __extends(Palette, _super);

  function Palette() {
    _ref = Palette.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Palette.prototype.model = new Intarsia.Models.Palette;

  Palette.prototype.tagName = 'div';

  Palette.prototype.className = 'intarsia-palette-holder';

  Palette.prototype.initialize = function(options) {
    var color, colors;
    console.log(this.model);
    colors = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.model.options.colors;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        color = _ref1[_i];
        _results.push({
          color: color
        });
      }
      return _results;
    }).call(this);
    this.palette = new Intarsia.Views.Swatches({
      collection: new Intarsia.Collections.Swatches(colors)
    });
    return this.listenTo(events, 'pattern:reset', this.reset);
  };

  Palette.prototype.setDefaultColor = function() {
    return this.palette.setDefaultColor();
  };

  Palette.prototype.render = function() {
    this.$el.prepend(this.palette.render().el);
    return this;
  };

  return Palette;

})(Backbone.View);
