// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'vent', 'handlebars', 'text!templates/swatch.html'], function($, _, Backbone, AppEvents, Handlebars, template) {
  var SwatchView, _ref;
  return SwatchView = (function(_super) {
    __extends(SwatchView, _super);

    function SwatchView() {
      this.markSelected = __bind(this.markSelected, this);
      this.setColor = __bind(this.setColor, this);
      _ref = SwatchView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SwatchView.prototype.tagName = 'li';

    SwatchView.prototype.className = 'intarsia-palette-color';

    SwatchView.prototype.template = Handlebars.compile(template);

    SwatchView.prototype.defaults = function() {
      return {
        color: 'default'
      };
    };

    SwatchView.prototype.events = {
      'click button': 'setColor'
    };

    SwatchView.prototype.initialize = function(options) {
      this.options = _.extend({}, this.defaults(), options);
      this.listenTo(AppEvents, 'swatch:select', this.markSelected);
      return this.listenTo(AppEvents, 'swatch:remove', this.remove);
    };

    SwatchView.prototype.setColor = function(evt) {
      evt.preventDefault();
      AppEvents.trigger('swatch:select', this.model.get('color'));
      return false;
    };

    SwatchView.prototype.markSelected = function(color) {
      if (color === this.model.get('color')) {
        return this.$el.addClass('selected');
      } else {
        return this.$el.removeClass('selected');
      }
    };

    SwatchView.prototype.render = function() {
      var color;
      color = this.model.get('color');
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return SwatchView;

  })(Backbone.View);
});
