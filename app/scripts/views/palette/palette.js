// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'backbone', 'vent', 'handlebars', 'text!templates/palette.html', 'collections/swatches', 'views/palette/swatches', 'models/palette'], function($, Backbone, AppEvents, Handlebars, template, SwatchesCollection, SwatchesView, PaletteModel) {
  var PaletteView, _ref;
  return PaletteView = (function(_super) {
    __extends(PaletteView, _super);

    function PaletteView() {
      _ref = PaletteView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PaletteView.prototype.model = new PaletteModel();

    PaletteView.prototype.tagName = 'div';

    PaletteView.prototype.className = 'intarsia-palette-holder';

    PaletteView.prototype.template = Handlebars.compile(template);

    PaletteView.prototype.initialize = function(options) {
      var color, swatches;
      swatches = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.model.options.swatches;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          color = _ref1[_i];
          _results.push({
            color: color
          });
        }
        return _results;
      }).call(this);
      this.model.swatches = new SwatchesCollection(swatches);
      this.palette = new SwatchesView({
        collection: this.model.swatches
      });
      return this.listenTo(AppEvents, 'pattern:reset', this.reset);
    };

    PaletteView.prototype.setDefaultColor = function() {
      return this.palette.setDefaultColor();
    };

    PaletteView.prototype.render = function() {
      this.$el.html(this.template({
        title: "Choose your stitch color:"
      }));
      this.$el.find('.panel-body').append(this.palette.render().el);
      return this;
    };

    return PaletteView;

  })(Backbone.View);
});
